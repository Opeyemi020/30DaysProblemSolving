package day3;import java.util.HashMap;public class IntegerToRoman {    private static final HashMap<Integer, String> romanNumerals = new HashMap<>();    static {        romanNumerals.put(1000,"M");        romanNumerals.put(900,"CM");        romanNumerals.put(500,"D");        romanNumerals.put(400,"CD");        romanNumerals.put(100,"C");        romanNumerals.put(90,"XC");        romanNumerals.put(50,"L");        romanNumerals.put(40,"XL");        romanNumerals.put(10,"X");        romanNumerals.put(9,"IX");        romanNumerals.put(5,"V");        romanNumerals.put(4,"IV");        romanNumerals.put(1,"I");    }    public String integerToRoman(int number){        if (number <= 0){            throw new IllegalArgumentException("number must be greater than 0");        }        StringBuilder builder = new StringBuilder();        while (number >= 1000){            builder.append(romanNumerals.get(1000));            number-= 1000;        }        while (number >= 900){            builder.append(romanNumerals.get(900));            number -= 900;        }        while (number>= 500){            builder.append(romanNumerals.get(500));            number -= 500;        }        while (number>= 400){            builder.append(romanNumerals.get(400));            number -= 400;        }        while (number >= 100){            builder.append(romanNumerals.get(100));            number -= 100;        }        while (number >= 90){            builder.append(romanNumerals.get(90));            number -= 90;        }        while (number >= 50){            builder.append(romanNumerals.get(50));            number -= 50;        }        while (number >= 40){            builder.append(romanNumerals.get(40));            number -= 40;        }        while (number >= 10){            builder.append(romanNumerals.get(10));            number -= 10;        }        while (number >= 9){            builder.append(romanNumerals.get(9));            number -= 9;        }        while (number >= 5){            builder.append(romanNumerals.get(5));            number -= 5;        }        while (number >= 4){            builder.append(romanNumerals.get(4));            number -= 4;        }        while (number >= 1){            builder.append(romanNumerals.get(1));            number--;        }        return builder.toString();    }}